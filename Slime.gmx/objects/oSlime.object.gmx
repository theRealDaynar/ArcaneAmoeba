<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sDI</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oSolidCollision</parentName>
  <maskName>sDI</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = .5
key_log = ds_list_create()
spd = 3
player = false
harvest = false
harvest_target = id
for(var i = 0; i &lt; 4; i ++)
{
    inv[i,0] = -1
    inv[i,1] = 0
}
draw_set_font(font0)
display_set_gui_size( window_get_width()/2, window_get_height()/2);
mass = 20
max_hunger = 100
hunger = max_hunger
metabolism = room_speed * 5
alarm[1] = metabolism
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///metabolism
hunger --
alarm[1] = metabolism
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///harvest resources
harvest = false
with(harvest_target)
    event_perform(ev_other,ev_user0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///key press checks
//move
if player = true{
if keyboard_check_pressed(ord("W")){
    update_key_log(1,0,key_log)
}else if keyboard_check_released(ord("W")){
    update_key_log(0,0,key_log)
}
if keyboard_check_pressed(ord("S")){
    update_key_log(1,1,key_log)
}else if keyboard_check_released(ord("S")){
    update_key_log(0,1,key_log)
}
if keyboard_check_pressed(ord("A")){
    update_key_log(1,2,key_log)
}else if keyboard_check_released(ord("A")){
    update_key_log(0,2,key_log)
}
if keyboard_check_pressed(ord("D")){
    update_key_log(1,3,key_log)
}else if keyboard_check_released(ord("D")){
    update_key_log(0,3,key_log)
}
if keyboard_check(vk_space) and harvest = false and distance_to_object(instance_nearest(x,y,oHarvestable)) &lt; 5
{
    harvest_target = instance_nearest(x,y,oHarvestable)
    alarm[0] = harvest_target.harvest_time
    speed = 0
    image_index = 0
    sprite_index = sAH
    harvest = true
}else if keyboard_check_released(vk_space)
    harvest = false
}
if keyboard_check(vk_shift) and distance_to_object(instance_nearest(x,y,oItem)) &lt; 5
{
    //check for existing item and then stack
    for(var i = 0; i &lt; 4; i ++)
        if inv[i,0] != -1 and inv[i,0].object_index = (instance_nearest(x,y,oItem)).object_index
        {
            inv[i,1] ++
            with(instance_nearest(x,y,oItem))
                instance_destroy()
            break;
        }
    if i &gt;= 4
    //check for empty slot
    for(var i = 0; i &lt; 4; i ++)
        if inv[i,0] = -1
        {
            inv[i,0] = instance_nearest(x,y,oItem)
            inv[i,0].on_ground = false
            inv[i,0].x = - 4000
            inv[i,0].visible = false
            inv[i,1] ++
            break;
        }
            
}
depth = -bbox_bottom
view_xview = x - view_wview/2
view_yview = y - view_hview/2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ai
if player = false
{
    if sprite_index = sHI or sprite_index = sTI or sprite_index = sDI
        image_index = 0
    randomize()
    repeat(2)
    switch(irandom(10))
    {
    case 0:
        vspeed = -spd;
        sprite_index = sTM
    break;
    case 1:
        vspeed = spd;
        sprite_index = sDM
    break;
    case 2:
        hspeed = -spd;
        sprite_index = sHM
        image_xscale = -abs(image_xscale)
    break;
    case 3:
        hspeed = spd;
        sprite_index = sHM
        image_xscale = abs(image_xscale)
    break;
    default:
        speed = 0
        switch(sprite_index)
        {
            case sHM:
            sprite_index = sHI
            break;
            case sTM:
            sprite_index = sTI
            break;
            case sDM:
            sprite_index = sDI
        }
    }
}
else if ds_list_size(key_log) &lt;= 0
{
    speed = 0
    switch(sprite_index)
    {
        case sHM: case sAH:
        sprite_index = sHI
        break;
        case sTM:
        sprite_index = sTI
        break;
        case sDM:
        sprite_index = sDI
    }
}
if harvest = true
{
    speed = 0
    sprite_index = sAH
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if player = true
{
    draw_rectangle_colour(15,6,87*hunger/max_hunger,11,c_blue,c_blue,c_blue,c_blue,false)
    draw_sprite(sHealthbar,0,0,0)
    draw_sprite(sInvBackground,0,0,40)
    for(var yy = 0; yy &lt;2; yy++)
        for(var xx = 0; xx &lt;2; xx++)
        {
            draw_sprite(sInvSlot,0,7+xx*20,46+yy*20)
            if inv[xx + yy * 2,0]!= - 1
            {   
                draw_sprite(inv[xx + yy * 2,0].sprite_index,0,7+xx*20+9,46+yy*20+9)
                if inv[xx + yy * 2,1] &gt; 1
                {
                    draw_set_halign(fa_right)
                    draw_set_valign(fa_bottom)
                    draw_text(7+xx*20+16,46+yy*20+17,inv[xx + yy * 2,1])
                }
                if inv[xx + yy * 2, 0].edible = true and mouse_check_button_pressed(mb_right) and device_mouse_x_to_gui(0) &gt; 7+xx*20 and device_mouse_x_to_gui(0) &lt; 7+xx*20 + 17 and device_mouse_y_to_gui(0) &gt; 46+yy*20 and device_mouse_y_to_gui(0) &lt; 46+yy*20+17
                {
                    hunger += inv[xx + yy * 2,0].stats
                    if hunger &gt;= max_hunger
                        hunger = max_hunger
                    inv[xx + yy * 2,1]--
                    if inv[xx + yy * 2,1] &lt;= 0
                        inv[xx + yy * 2,0] = -1
                }
            }
        }
    if harvest = true
    {
        var viewx, viewy,objxx,objyy,relativexx,relativeyy,xx,yy
        viewx = view_xview[0] // view coords in room
        viewy = view_yview[0] // view coords in room
        objxx = x - viewx // obj coords in view
        objyy = y - 20 - viewy // obj coords in view
        relativexx = (objxx / view_wview[0]) // get the percentage difference of obj pos to view pos
        relativeyy = (objyy / view_hview[0]) // get the percentage difference of obj pos to view pos
        xx = display_get_gui_width() * relativexx // apply that percentage to the GUI width
        yy = display_get_gui_height() * relativeyy // apply that percentage to the GUI height
        draw_rectangle_colour(xx - 41,yy - 3,xx - 41 + 84*(harvest_target.harvest_time-alarm[0])/(harvest_target.harvest_time),yy + 2,c_aqua,c_aqua,c_aqua,c_aqua,false)
        draw_sprite(sProgressBar,0,xx,yy)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,10</point>
    <point>10,10</point>
  </PhysicsShapePoints>
</object>
